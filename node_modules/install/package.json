{
  "_args": [
    [
      {
        "raw": "install",
        "scope": null,
        "escapedName": "install",
        "name": "install",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/rzc/xcworld/xc-server-share"
    ]
  ],
  "_cnpm_publish_time": 1539472511730,
  "_from": "install",
  "_hasShrinkwrap": false,
  "_id": "install@0.12.2",
  "_location": "/install",
  "_nodeVersion": "8.12.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/install_0.12.2_1539472511591_0.3661575687789429"
  },
  "_npmUser": {
    "name": "benjamn",
    "email": "ben@benjamn.com"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "install",
    "scope": null,
    "escapedName": "install",
    "name": "install",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "http://172.16.1.179:4873/install/-/install-0.12.2.tgz",
  "_shasum": "ea10e9b2cbb5b0484f25080b24b5b34429d9f564",
  "_shrinkwrap": null,
  "_spec": "install",
  "_where": "/Users/rzc/xcworld/xc-server-share",
  "author": {
    "name": "Ben Newman",
    "email": "bn@cs.stanford.edu"
  },
  "bugs": {
    "url": "https://github.com/benjamn/install/issues"
  },
  "dependencies": {},
  "description": "Minimal JavaScript module loader",
  "devDependencies": {
    "docco": "^0.8.0",
    "mocha": "^5.0.0",
    "reify": "^0.18.1",
    "terser": "^3.10.0"
  },
  "directories": {},
  "dist": {
    "shasum": "ea10e9b2cbb5b0484f25080b24b5b34429d9f564",
    "size": 10412,
    "noattachment": false,
    "tarball": "http://172.16.1.179:4873/install/-/install-0.12.2.tgz"
  },
  "engines": {
    "node": ">= 0.10"
  },
  "gitHead": "d173487a019af67105ae678b68cde7172a613b74",
  "homepage": "http://github.com/benjamn/install",
  "keywords": [
    "modules",
    "require",
    "commonjs",
    "exports",
    "browser",
    "packaging",
    "packager",
    "install"
  ],
  "license": "MIT",
  "main": "install.js",
  "maintainers": [
    {
      "name": "benjamn",
      "email": "bn@cs.stanford.edu"
    }
  ],
  "name": "install",
  "optionalDependencies": {},
  "publish_time": 1539472511730,
  "readme": "# install [![Build Status](https://travis-ci.org/benjamn/install.svg?branch=master)](https://travis-ci.org/benjamn/install) [![Greenkeeper badge](https://badges.greenkeeper.io/benjamn/install.svg)](https://greenkeeper.io/)\n\nThe [CommonJS module syntax](http://wiki.commonjs.org/wiki/Modules/1.1) is one of the most widely accepted conventions in the JavaScript ecosystem. Everyone seems to agree that `require` and `exports` are a reasonable way of expressing module dependencies and interfaces, and the tools for managing modular code are getting better all the time.\n\nMuch less of a consensus has developed around the best way to deliver CommonJS modules to a web browser, where the synchronous semantics of `require` pose a non-trivial implementation challenge. This module loader contributes to that confusion, yet also demonstrates that an amply-featured module loader need not stretch into the hundreds or thousands of lines.\n\nInstallation\n---\nFrom NPM:\n\n    npm install install\n\nFrom GitHub:\n\n    cd path/to/node_modules\n    git clone git://github.com/benjamn/install.git\n    cd install\n    npm install .\n\nUsage\n---\n\nThe first step is to create an `install` function by calling the\n`makeInstaller` method. Note that all of the options described below are\noptional:\n\n```js\nvar install = require(\"install\").makeInstaller({\n  // Optional list of file extensions to be appended to required module\n  // identifiers if they do not exactly match an installed module.\n  extensions: [\".js\", \".json\"],\n\n  // If defined, the options.fallback function will be called when no\n  // installed module is found for a required module identifier. Often\n  // options.fallback will be implemented in terms of the native Node\n  // require function, which has the ability to load binary modules.\n  fallback,\n\n  // Boolean flag indicating whether the installed code will be running in\n  // a web browser.\n  browser,\n\n  // List of fields to look for in package.json files to determine the\n  // main entry module of the package. The first field listed here whose\n  // value is a string will be used to resolve the entry module. Defaults\n  // to just [\"main\"], or [\"browser\", \"main\"] if options.browser is true.\n  mainFields: [\"browser\", \"main\"],\n});\n```\n\nThe second step is to install some modules by passing a nested tree of\nobjects and functions to the `install` function:\n\n```js\nvar require = install({\n  \"main.js\"(require, exports, module) {\n    // On the client, the \"assert\" module should be install-ed just like\n    // any other module. On the server, since \"assert\" is a built-in Node\n    // module, it may make sense to let the options.fallback function\n    // handle such requirements. Both ways work equally well.\n    var assert = require(\"assert\");\n\n    assert.strictEqual(\n      // This require function uses the same lookup rules as Node, so it\n      // will find \"package\" in the \"node_modules\" directory below.\n      require(\"package\").name,\n      \"/node_modules/package/entry.js\"\n    );\n\n    exports.name = module.id;\n  },\n\n  node_modules: {\n    package: {\n      // If package.json is not defined, a module called \"index.js\" will\n      // be used as the main entry point for the package. Otherwise the\n      // exports.main property will identify the entry point.\n      \"package.json\"(require, exports, module) {\n        exports.name = \"package\";\n        exports.version = \"0.1.0\";\n        exports.main = \"entry.js\";\n      },\n\n      \"entry.js\"(require, exports, module) {\n        exports.name = module.id;\n      }\n    }\n  }\n});\n```\n\nNote that the `install` function merely installs modules without\nevaluating them, so the third and final step is to `require` any entry\npoint modules that you wish to evaluate:\n\n```js\nconsole.log(require(\"./main\").name);\n// => \"/main.js\"\n```\n\nThis is the \"root\" `require` function returned by the `install`\nfunction. If you're using the `install` package in a CommonJS environment\nlike Node, be careful that you don't overwrite the `require` function\nprovided by that system.\n\nIf you need to change the behavior of the `module` object that each module\nfunction receives as its third parameter, the shared `Module` constructor\nis exposed as a property of the `install` function returned by the\n`makeInstaller` factory:\n\n```js\nvar install = makeInstaller(options);\nvar proto = install.Module.prototype;\n\n// Wrap all Module.prototype.require calls with some sort of logging.\nproto.require = wrapWithLogging(proto.require);\n\n// Add a new method available to all modules via module.newMethod(...).\nproto.newMethod = function () {...};\n```\n\nMany more examples of how to use the `install` package can be found in the\n[tests](https://github.com/benjamn/install/blob/master/test/run.js).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/benjamn/install.git"
  },
  "scripts": {
    "docs": "scripts/docs.sh",
    "prepublish": "scripts/prepublish.sh",
    "test": "mocha --reporter spec --full-trace test/run.js"
  },
  "version": "0.12.2"
}
